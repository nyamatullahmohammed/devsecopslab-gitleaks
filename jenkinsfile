pipeline {
    agent {
        label 'nyamat-security-agent'
    }

    environment {
        VAULT_ADDR = 'http://34.228.140.38:8400/'
    }

    stages {
        stage('Cleanup') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('GitLeaks Scan') {
            steps {
                sh '''#!/bin/bash
                    set -eux
                    # Install gitleaks if not present
                    if ! command -v gitleaks &> /dev/null; then
                        echo "Installing Gitleaks..."
                        wget https://github.com/zricethezav/gitleaks/releases/download/v8.18.1/gitleaks_8.18.1_linux_x64.tar.gz
                        tar -xzf gitleaks_8.18.1_linux_x64.tar.gz
                        chmod +x gitleaks
                        sudo mv gitleaks /usr/local/bin/
                    fi
                    
                    # Run gitleaks detect even if from non commited codes
                    exit_code=0
                    gitleaks detect --source . --no-git --verbose --report-path gitleaks-report.json || exit_code=$?
                    echo $exit_code
                    set -e
                    if [ "$exit_code" -ne 0 ]; then
                        echo "‚ùå Gitleaks found leaks (exit code $exit_code)"
                        exit 1
                    else
                        echo "‚úÖ No leaks found."
                    fi
                    '''
            }
        }
        stage('Fetch Secret from Vault') {
            steps {
                script {
                    withVault([vaultSecrets: [
                        [path: 'secret/app_secret', secretValues: [[envVar: 'APP1', vaultKey: 'app1']
                        ]]
                    ]]) {
                    sh '''
                    docker rm -f py-app || true
                    docker rmi -f flask-vault-app:latest || true
                    docker build -t flask-vault-app:latest .
                    docker run -d -p 8005:5000 -e API_KEY=$APP1 --name py-app flask-vault-app:latest
                    '''
                    }
                }
            }
        }
        
    }
    stage('OWASP ZAP Scan') {
    agent { label 'ubuntu' }
    steps {
        sh '''#!/bin/bash
        # Use Bash explicitly so "pipefail" works
        set -euxo pipefail
 
        TARGET_URL="http://34.228.140.38:8005"
 
        echo "üîÑ Waiting for app to start..."
        for i in {1..10}; do
            if curl -s --max-time 5 $TARGET_URL >/dev/null; then
                echo "‚úÖ App is up!"
                break
            fi
            sleep 5
        done
 
        echo "üöÄ Running OWASP ZAP Baseline Scan..."
        # Run ZAP in Docker; ignore exit code (ZAP returns 2 for warnings)
        docker run --rm -v $(pwd):/zap/wrk/:rw \
            --network="host" \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py -t $TARGET_URL -r zap_report.html || true
 
        mkdir -p reports
        mv zap_report.html reports/
 
        echo "üîç Checking ZAP results for FAIL-NEW entries..."
        FAIL_COUNT=$(grep -oE "FAIL-NEW: [0-9]+" reports/zap_report.html | awk '{print $2}' || echo 0)
 
        # If grep finds nothing, default to 0
        if [ -z "$FAIL_COUNT" ]; then
            FAIL_COUNT=0
        fi
 
        if [ "$FAIL_COUNT" -gt 0 ]; then
            echo "‚ùå ZAP found $FAIL_COUNT high-severity vulnerabilities!"
            exit 1
        else
            echo "‚úÖ No high-severity vulnerabilities found. Build will continue."
        fi
        '''
    }
    post {
        always {
            archiveArtifacts artifacts: 'reports/zap_report.html', fingerprint: true
        }
        success {
            echo '‚úÖ ZAP scan completed successfully ‚Äî only warnings or no issues.'
        }
        failure {
            echo '‚ùå Build failed because high-severity issues were found in ZAP scan.'
        }
    }
}
